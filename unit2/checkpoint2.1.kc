//XMega65 Kernal Development Templete 
//Each function of the kernal is a no-args function
//The functions are placed in the SYSCALLS table surrounded by JVM and NOP

import "string"

//Use a linker definition file ( put the previous listing into that file)
#pragma link("mega65hyper.ld")

//Some definitions of address and special values that this program uses
const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800; 
const char BLACK = 0; 
const char WHITE = 1; 

// Some text to display 
char[] MESSAGE = "checkpoint 1.1 by puth0016"; 

void main() {
			// Initialise screen MEMORY, and select correct font
			*VIC_MEMORY = 0x14;
			// Fill the screen with spaces
			memset(SCREEN,' ', 40*25);
			// Set the color of every character
			memset(COLS, WHITE, 40*25);
			//Print the "hello world!" message
			char* sc = SCREEN+40; //Display it one line down on the screen
			char* msg = MESSAGE; // The messag to display
			// A simple copy routine to copy the string 
			while(*msg){
			*sc++ = *msg++;
			}
			// Loop forever showing two white lines ae raster bars
			while(true){
			if(*RASTER==54 || *RASTER==66){
				*BGCOL = WHITE;
			} else {
				*BGCOL = BLACK;
			}
	  }
			
 }
 // Here are couple sample SYSCALL handelers that just display a character on the screen 
 	void syscall1(){
 	*(SCREEN+79) = ')';
 	}
 	
 		void syscall2(){
 		*(SCREEN+78) = '(';
 		}
 		
	//Now we select the SYSCALL segment to hold the SYSCALL/trap entry point table,
	#pragma data_seg(Syscall)
	
	// The Structure of each entry point is JMP (handler address) + NOP,
	//We have a char (xjmp) to hold the opcode for the JMP instruction
	//and then put the address of thr SYSCALL/trap handeler in the next 
	//two point as a pointer, and end with the NOP instruction opcode,
	struct SysCall {
	char xjmp;  					// Hold $4C, the JMP $nnnn opcode
	void()* syscall;  		// Hold handeler address, will be the target of the JMP
	char xnop;						// Hold $EA, the NOP opcode  			
	
	};
	
	// To save writing 0x4C and 0xEA all the time , we define them as constant 
	const char JMP = 0x4c;
	const char NOP = 0xea;
	
	// Now we have a nice table of up to 64 SYSCALL handeler expressed 
	// in a fairly readable and easy format.
	// Each line is an instance of the struct Syscall from above, with the JMP
	// opcode value, the address of the handeler routin and the NOP opcode value,
	export struct SysCall[] SYSCALLS ={
	{ JMP, &syscall1, NOP},
	{ JMP, &syscall2, NOP}
	};
	
	// In this example we had only two SYSCALLs define, so rather than having
	// another 62 lines, we can just ask KickC to make the TRAP table beign 
	//at the next multiple of $100, i.e., at $8100.
	export align(0x100) struct SysCall[] SYSCALL_RESET = {
		{ JMP,&main, NOP }
	
	};
 